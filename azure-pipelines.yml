# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- admin/azure-pipelines

pool:
  vmImage: macOS-11

variables:
  DERIVED_DATA_CACHE_FOLDER:  $(Build.SourcesDirectory)/src/xcode/DerivedData

jobs:

- job: 'BuildForTesting'
  steps:

  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      cd src/xcode && bundle exec fastlane build_for_testing
    displayName: 'Build for Testing'

  - task: Cache@2
    displayName: 'Store Derived Data Cache'
    inputs:
      key: 'v1 | derived_data_cache | "$(Agent.OS)" | $(Build.SourceVersion)'
      restoreKeys: |
        v1 | derived_data_cache | "$(Agent.OS)"
        v1 | derived_data_cache
      path: $(DERIVED_DATA_CACHE_FOLDER)
      cacheHitVar: DERIVED_DATA_CACHE_RESTORED

- job: 'testAllTests'
  dependsOn: 'BuildForTesting'
  steps:

  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - task: Cache@2
    displayName: 'Restore Derived Data Cache'
    inputs:
      key: 'v1 | derived_data_cache | "$(Agent.OS)" | $(Build.SourceVersion)'
      restoreKeys: |
        v1 | derived_data_cache | "$(Agent.OS)"
        v1 | derived_data_cache
      path: $(DERIVED_DATA_CACHE_FOLDER)
      cacheHitVar: DERIVED_DATA_CACHE_RESTORED

  - script: |
      cd src/xcode && bundle exec fastlane test_without_building testplan:AllTests
    displayName: 'test-AllTests'

- job: 'Swiftlint'

  steps:
  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      swiftlint --version
      pwd
      ls -la
      cd src/xcode
      ls -la    
      bundle exec fastlane lint
    displayName: 'SwiftLint'
