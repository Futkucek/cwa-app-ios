# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- admin/azure-pipelines

pool:
  vmImage: macOS-11

variables:
  VENDOR_CACHE_FOLDER: $(Build.SourcesDirectory)/src/xcode/vendor
  BUNDLE_CONFIG_FOLDER: $(Build.SourcesDirectory)/src/xcode/.bundle

jobs:
- job: dependencies
  steps:
  - script: |
      sw_vers  
      xcodebuild -version
      ls -n /Applications/ | grep Xcode*
    displayName: 'Check MacOS and Xcode Version'

  - script: |
      pwd 
      ls -la
      cd src/xcode
      ls -la
    displayName: 'Show Workspace'

#  - task: Cache@2
#    displayName: 'Restore Vendor Cache'
#    inputs:
#      key: 'v2 | vendor_cache | "$(Agent.OS)" | $(Build.SourcesDirectory)/src/xcode/Gemfile.lock'
#      restoreKeys: |
#        v2 | vendor_cache | "$(Agent.OS)"
#        v2 | vendor_cache
#      path: $(VENDOR_CACHE_FOLDER)
#      cacheHitVar: VENDOR_CACHE_RESTORED

#  - script: |
#      echo VENDOR_CACHE_RESTORED: $(VENDOR_CACHE_RESTORED)
#    displayName: 'Check Result of Restoring Caches'

  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      pwd 
      ls -la
      cd src/xcode
      ls -la
    displayName: 'Show Workspace'

  - script: |
      cd src/xcode
      bundle info fastlane
      bundle info xcode-install
      bundle info fastlane-plugin-appcenter
    displayName: 'Where are dependencies installed?'

- job: 'BuildForTesting'
  dependsOn: 'dependencies'
  steps:

  - script: |
      pwd 
      ls -la
      cd src/xcode
      ls -la
    displayName: 'Show Workspace'

  - script: |
      cd src/xcode && bundle exec fastlane build_for_testing
    displayName: 'Build for Testing'

- job: 'Swiftlint'
  dependsOn: 'dependencies'
  steps:
  - script: |
      swiftlint --version
      pwd
      ls -la
      cd src/xcode
      ls -la    
      bundle exec fastlane lint
    displayName: 'SwiftLint'
