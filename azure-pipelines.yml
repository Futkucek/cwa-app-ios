# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- admin/azure-pipelines

pool:
  vmImage: macOS-11

variables:
  DERIVED_DATA_CACHE_FOLDER: $(Build.SourcesDirectory)/src/xcode/DerivedData
  TEST_OUTPUT_CACHE_FOLDER: $(Build.SourcesDirectory)/src/xcode/fastlane/test_output

jobs:

- job: 'BuildForTesting'
  steps:

  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      cd src/xcode && bundle exec fastlane build_for_testing
    displayName: 'Build for Testing'

  - script: |
      cd src/xcode
      ls -la
      cd DerivedData
      ls -la
    displayName: 'Show Derived Data'

  - script: |
      cd src/xcode
      ls -la
      cd fastlane
      ls -la
    displayName: 'Show Fastlane Folder'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/src/xcode/DerivedData'
      includeRootFolder: true
      archiveType: 'tar'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-DerivedData.tgz'
      replaceExistingArchive: true
      verbose: true
    displayName: 'Compress Derived Data'

  - task: Cache@2
    displayName: 'Store Derived Data Archive'
    inputs:
      key: 'v1 | derived_data_archive| "$(Agent.OS)" | $(Build.SourceVersion)'
      path: $(Build.ArtifactStagingDirectory)

  - task: Cache@2
    displayName: 'Store Derived Data Cache'
    inputs:
      key: 'v1 | derived_data_cache | "$(Agent.OS)" | $(Build.SourceVersion)'
      path: $(DERIVED_DATA_CACHE_FOLDER)

  - task: Cache@2
    displayName: 'Store test_output Cache'
    inputs:
      key: 'v1 | test_output_cache | "$(Agent.OS)" | $(Build.SourceVersion)'
      path: $(TEST_OUTPUT_CACHE_FOLDER)

- job: 'testAllTests'
  dependsOn: 'BuildForTesting'
  steps:

  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      cd src/xcode
      ls -la
      cd DerivedData
      ls -la
    displayName: 'Show Derived Data'

  - task: Cache@2
    displayName: 'Restore Derived Data Cache'
    inputs:
      key: 'v1 | derived_data_cache | "$(Agent.OS)" | $(Build.SourceVersion)'
      path: $(DERIVED_DATA_CACHE_FOLDER)

  - task: Cache@2
    displayName: 'Restore test_output Cache'
    inputs:
      key: 'v1 | test_output_cache | "$(Agent.OS)" | $(Build.SourceVersion)'
      path: $(TEST_OUTPUT_CACHE_FOLDER)

  - script: |
      cd src/xcode
      ls -la
      cd DerivedData
      ls -la
      cd ..
      cd fastlane
    displayName: 'Show Derived Data and fastlane folder'

  - script: |
      cd src/xcode && bundle exec fastlane test_without_building testplan:AllTests
    displayName: 'test-AllTests'

- job: 'Swiftlint'

  steps:
  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      swiftlint --version
      pwd
      ls -la
      cd src/xcode
      ls -la    
      bundle exec fastlane lint
    displayName: 'SwiftLint'
